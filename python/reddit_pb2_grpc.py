# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import reddit_pb2 as reddit__pb2


class RedditStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/reddit.Reddit/CreatePost',
                request_serializer=reddit__pb2.Post.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.VotePost = channel.unary_unary(
                '/reddit.Reddit/VotePost',
                request_serializer=reddit__pb2.VoteRequest.SerializeToString,
                response_deserializer=reddit__pb2.VoteResponse.FromString,
                )
        self.RetrievePost = channel.unary_unary(
                '/reddit.Reddit/RetrievePost',
                request_serializer=reddit__pb2.PostRequest.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.CreateComment = channel.unary_unary(
                '/reddit.Reddit/CreateComment',
                request_serializer=reddit__pb2.Comment.SerializeToString,
                response_deserializer=reddit__pb2.Comment.FromString,
                )
        self.VoteComment = channel.unary_unary(
                '/reddit.Reddit/VoteComment',
                request_serializer=reddit__pb2.VoteRequest.SerializeToString,
                response_deserializer=reddit__pb2.VoteResponse.FromString,
                )
        self.RetrieveComments = channel.unary_unary(
                '/reddit.Reddit/RetrieveComments',
                request_serializer=reddit__pb2.CommentsRequest.SerializeToString,
                response_deserializer=reddit__pb2.CommentsResponse.FromString,
                )
        self.ExpandCommentBranch = channel.unary_unary(
                '/reddit.Reddit/ExpandCommentBranch',
                request_serializer=reddit__pb2.ExpandRequest.SerializeToString,
                response_deserializer=reddit__pb2.CommentsResponse.FromString,
                )
        self.MonitorUpdates = channel.unary_stream(
                '/reddit.Reddit/MonitorUpdates',
                request_serializer=reddit__pb2.MonitorRequest.SerializeToString,
                response_deserializer=reddit__pb2.UpdateResponse.FromString,
                )


class RedditServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreatePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VotePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrievePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoteComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveComments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExpandCommentBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorUpdates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RedditServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=reddit__pb2.Post.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'VotePost': grpc.unary_unary_rpc_method_handler(
                    servicer.VotePost,
                    request_deserializer=reddit__pb2.VoteRequest.FromString,
                    response_serializer=reddit__pb2.VoteResponse.SerializeToString,
            ),
            'RetrievePost': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrievePost,
                    request_deserializer=reddit__pb2.PostRequest.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'CreateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateComment,
                    request_deserializer=reddit__pb2.Comment.FromString,
                    response_serializer=reddit__pb2.Comment.SerializeToString,
            ),
            'VoteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.VoteComment,
                    request_deserializer=reddit__pb2.VoteRequest.FromString,
                    response_serializer=reddit__pb2.VoteResponse.SerializeToString,
            ),
            'RetrieveComments': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveComments,
                    request_deserializer=reddit__pb2.CommentsRequest.FromString,
                    response_serializer=reddit__pb2.CommentsResponse.SerializeToString,
            ),
            'ExpandCommentBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.ExpandCommentBranch,
                    request_deserializer=reddit__pb2.ExpandRequest.FromString,
                    response_serializer=reddit__pb2.CommentsResponse.SerializeToString,
            ),
            'MonitorUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.MonitorUpdates,
                    request_deserializer=reddit__pb2.MonitorRequest.FromString,
                    response_serializer=reddit__pb2.UpdateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'reddit.Reddit', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reddit(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/CreatePost',
            reddit__pb2.Post.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VotePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/VotePost',
            reddit__pb2.VoteRequest.SerializeToString,
            reddit__pb2.VoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrievePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/RetrievePost',
            reddit__pb2.PostRequest.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/CreateComment',
            reddit__pb2.Comment.SerializeToString,
            reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VoteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/VoteComment',
            reddit__pb2.VoteRequest.SerializeToString,
            reddit__pb2.VoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/RetrieveComments',
            reddit__pb2.CommentsRequest.SerializeToString,
            reddit__pb2.CommentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExpandCommentBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/ExpandCommentBranch',
            reddit__pb2.ExpandRequest.SerializeToString,
            reddit__pb2.CommentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MonitorUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/reddit.Reddit/MonitorUpdates',
            reddit__pb2.MonitorRequest.SerializeToString,
            reddit__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
